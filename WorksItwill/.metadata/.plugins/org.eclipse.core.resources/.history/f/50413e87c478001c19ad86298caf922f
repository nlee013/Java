package javaProject1;

import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Random;
import java.util.Scanner;

public class Fishing extends Thread {

	ArrayList<String> lists = new ArrayList<>();
	Scanner sc = new Scanner(System.in);
	int num;
	int ch;
	int cnt = 0;
	String type;
	String[] fname = {"사하브라 물고기", "피치드 물고기", "티위르 물고기", "퓨라기 물고기", "미라다 물고기",
										"신발", "시프란 물고기", "스프링 물고기", "자바자바 물고기", "리엑트 물고기",
										"오라클 물고기", "애프르 물고기", "사므성 물고기", "엘지르 물고기", "헤프리 물고기"};
	Thread ob;
	Random rd;
	String fish;

	/*@Override
	public void run() {

		while(true) {

			System.out.println(".");

			try {

				sleep(300);

				if(cnt==20)
					break;

				cnt++;


			} catch (Exception e) {
				// TODO: handle exception
			}
		}
	}*/


public void input() {
		
		Random rd = new Random();
		
		do {
			System.out.println("낚시대 하나를 고르세요! 1)셔흐르린 낚시대 2)잘자브린 낚시대 3)평버므한 낚시대");
			num = sc.nextInt();
			
		}while(num > 3 || num < 1);
		
		type = fname[rd.nextInt(15) + 1];
	
			lists.add(type);
			
	}
	
	public void print() {
		
		System.out.println("오오!! 잘 잡으셨네요");
		
				if(num == 1) {
					System.out.printf("%d번 낚시대를 고른 당신: %s \n", num, type);
				}else if(num == 2) {
					System.out.printf("%d번 낚시대를 고른 당신: %s \n", num, type);
				}else if(num == 3) {
					System.out.printf("%d번 낚시대를 고른 당신: %s \n", num, type);
				}
			
				
		
				
				
	}
	public void waitFinshing() {
		
		System.out.println("물고기가 오기를 기다리는 중");
	}
	
	@Override
	public void run() {
		
		 int i = 0;
		 
		 while(i < 20) {
			 
			 System.out.print(".");
			 
			 try {
				 sleep(100);
			} catch (Exception e) {
				System.out.println(e.toString());
			}
			 i++;
		 }
	}
	public void startFishing() {
		
		input();
		waitFinshing();
		run();
		print();

	}

	public void aquarium() {

		ch = 0;
		
		ListIterator<String> it = lists.listIterator();
		while(it.hasNext()) {
			System.out.println(it.next() + "");
		}
		

		while(true) {

			do {
				System.out.print("수족관 메뉴: 1. 먹기 2. 방생 3. 메인으로 돌아가기");
				ch = sc.nextInt();

				switch(ch) {
				case 1 : eat();break;
				case 2 : release();break;
				case 3 : return;
				}


			}while(ch<1||ch>3);
		}
	}


	public void exit() {

	}

	public void eat() {

		ListIterator<String> it = lists.listIterator();
		while(it.hasNext()) {
			System.out.println(it.next() + "");
		}
		
		
		//ob = new Fishing();
		
	
		System.out.print("어떤 물고기를 요리하시겠습니까?");
		fish = sc.next();
		
		if(!searchFish(fish)) {
	
			System.out.println("물고기가 없습니다");// 수족관에 있는 물고기 이상 , 멘트?
			return;
		}
		
		
		System.out.printf(" %s 를(을) 요리중입니다",fish);

		/*ob.start();

		try {
			ob.join();
		} catch (Exception e) {
			// TODO: handle exception
		}*/

		System.out.printf("맛있는 %s 요리가 완성되었습니다\n",fish);
		System.out.print("맛있게 드세요!");
		
		lists.remove(fish);
		
	
	}


	public void release() {
		
		
			System.out.print("어떤 물고기를 놓아주시겠습니까");
			fish = sc.next();
			
			
		
		
		System.out.printf("%s 를(을) 놓아주었습니다",fish);
		
		lists.remove(fish);
		
		if(!searchFish(fish)) {
			
			System.out.println("물고기가 없습니다");
			return;
		}


	}

	
	public boolean searchFish(String fish) {
		
		if(lists.contains(fish)) {
			return true;
		}
		
		
		return false;
		
		
		
		
		
	}





}
